//rq listfunction rq_list(myRequisitions) {	document.getElementById("listView").style.display = "block";	document.getElementById("formView").style.display = "none";	//get the rqListTable	var tbl = document.getElementById("rqListTable");	var tBody = tbl.tBodies[0];	//the data field names are specified in a hidden caption of	//the rqListTable. Here we load them into 'col' variable.	var col = tbl.caption.innerText.trim().split(",");	// ADD JSON DATA TO THE TABLE AS ROWS.	for (var i = 0; i < myRequisitions.length; i++) {		//check if there is a row. if not, add it.		if(tBody.rows[i] == undefined) {			var cln = tBody.rows[i - 1].cloneNode(true);			tBody.appendChild(cln);		}		var tr = tBody.rows[i];		//populate the spans of the row		var spans = tr.getElementsByTagName("span");		for (var j = 0; j < col.length; j++) {			spans[j].innerHTML = myRequisitions[i][col[j]];		}		//set the onclick and the cursor of this table row		var onclickStr = "setId(" + myRequisitions[i]["requisitionId"] + ")";		tr.setAttribute('onclick', onclickStr)	}}//rq formfunction rq_form(myRequisition) {	document.getElementById("listView").style.display = "none";	document.getElementById("formView").style.display = "block";	document.getElementById("rqId").innerHTML = rqId;	var user = document.getElementById("user").innerHTML;	var userId = document.getElementById("userId").innerHTML;	if(rqId == "new") {		//alert(user + " :: " + userId);		clearForm();		var inputs = document.getElementById("rqData").getElementsByTagName("input");		for(i=0, l=inputs.length; i<l; i++) {			if(inputs[i].name == "preparedByName") {				//alert("Gonna insert " + user + " into " + inputs[i].name);				inputs[i].value = user;			}			if(inputs[i].name == "preparedById") {				//alert("Gonna insert " + userId + " into " + inputs[i].name);				inputs[i].value = userId;			}			if(inputs[i].name == "preparedDate") {				//alert("Gonna insert " + userId + " into " + inputs[i].name);				inputs[i].value = today_yyyy_mm_dd();			}			if(inputs[i].name == "userId") {				//alert("Gonna insert " + userId + " into " + inputs[i].name);				inputs[i].value = userId;			}		}	}	//populate the rq data elements	if(typeof myRequisition == "object") {		var inputs;				vendors = myRequisition.vendors;		inputs = document.getElementById("rqData").getElementsByTagName("input");		for(i=0, l=inputs.length; i<l; i++) {			inputs[i].value = myRequisition[inputs[i].name];			if(inputs[i].name == "userId") { inputs[i].value = userId; }			//console.log(obj[i].name + ": " + myRequisition[obj[i].name]);		}		//populate the rq items data elements		var tbl = document.getElementById("items_table");		var tBody = tbl.tBodies[0];		var numRqItems = myRequisition.items.length;		//delete table rows if necessary		while(tBody.rows[numRqItems] !== undefined) {			tbl.deleteRow(numRqItems);		}		for (i = 0; i < numRqItems; i++) {			//check if there is a row. if not, add it.			if(tBody.rows[i] == undefined) {				var cln = tBody.rows[i - 1].cloneNode(true);				tBody.appendChild(cln);			}			inputs = tBody.rows[i].getElementsByTagName("input");			for(j=0, jl=inputs.length; j<jl; j++) {				inputs[j].value = myRequisition["items"][i][inputs[j].name];			}			inputs[jl - 1].checked = false;		}				check_cctr();	}}//copy last row, clear it and append to tablefunction copyRow(tableId) {	var tBody = document.getElementById(tableId).tBodies[0];	var lastRow = tBody.rows.length - 1;	var cln = tBody.rows[lastRow].cloneNode(true);	inputs = cln.getElementsByTagName("input");	for(j=0, l=inputs.length; j<l; j++) {		inputs[j].value = "";	}	tBody.appendChild(cln);}function deleteRowItem(delObj) {	var delRow = delObj.parentNode.parentNode;	var tbl = delRow.parentNode;	var delRowIndex = Array.prototype.indexOf.call(tbl.rows, delRow);	//alert(delRowIndex);	delRowItemId = delRow.cells[0].childNodes[0].value;	if(delRowItemId) {		;	} else {		if(delRowIndex > 1) {			tbl.deleteRow(delRowIndex);		} else {			delObj.checked = false;		}	}}//set the rqId and call mainfunction setId(value) {	rqId=value;	main();}//set the vendorname, called by onchange from vendorId elementfunction get_vendor(el) {	document.getElementById("vendorName").value = vendors[el.value];}function check_cctr() {	var cCtrs = {"MOE":"Office of the Minister","BEA":"Office of the Director, Bureau of Education Administration","BCI":"Office of the Director, Bureau of Curriculum and Instruction","DRE":"Office of the Chief, Division of Research and Evaluation","DPM":"Office of the Chief, Division of Personnel Management","DSM":"Office of the Chief, Division of School Management","DIITT":"Office of the Chief, Division of Instructional Implementation and Teacher Training","DCIMD":"Office of the Chief, Division of Curriculum Instruction and Material Development","PJFK":"Palau Japan Friendship/Kayangel Elementary School","Ngarchelong":"Ngarchelong Elementary School","Ngaraard":"Ngaraard Elementary School","Melekeok":"Melekeok Elementary School","Airai":"Airai Elementary School","Ngardmau":"Ngardmau Elementary School","Ngeremlengui":"Ngeremlengui Elementary School","Ibobang":"Ibobang Elementary School","Aimeliik":"Aimeliik Elementary School","GBH":"George B. Harris Elementary School","Koror":"Koror Elementary School","PHS":"Palau High School","Meyuns":"Meyuns Elementary School","Peleliu":"Peleliu Elementary School","Angaur":"Angaur Elementary School","Sonsorol":"Sonsorol Elementary School","Puloana":"Pulo Ana Elementary School","Tobi":"Tobi Elementary School","SpEd":"Special Education Office","AdultEd":"Adult Education Program","PubLib":"Public Library","PCC":"Palau Community College","StuLunch":"Student Lunch (Food Services)","StuBus":"Student Busing","Trans":"Transportation Services","IT":"Information Technology/Computer Services","Facil":"Facilities Services","MPC":"Materials Production Center","Finance":"Finance Services"};	cCtr = document.getElementById("costCenter");	if(cCtr.value) {		if(!cCtrs[cCtr.value]) cCtr.style.color = "red";	}}//clear the form for a new rqfunction clearForm() {	var inputs;	var tBody = document.getElementById("items_table").tBodies[0];	//console.log(tBody.rows);	while(tBody.rows[1] != undefined) { tBody.deleteRow(1); }	inputs = tBody.rows[0].getElementsByTagName("input");	//console.log(inputs);	for(i=0, il=inputs.length; i<il; i++) {		inputs[i].value = "";	}	inputs = document.getElementById("rqData").getElementsByTagName("input");	for(let i=0, il=inputs.length; i<il; i++) {		if(inputs[i].name != "userId") {			inputs[i].value = "";		}	}	inputs[il - 1].checked = false;}function rq_form_validate() {	var valid = true;	//rq data	var inputs = document.getElementById("rqData").getElementsByTagName("input");	for(i = 0, l=inputs.length; i<l; i++) {		var name = inputs[i].name; var value = inputs[i].value;		if(value == "") {			//if(name == "initiatingOffice") { valid = false; break; }			if(name == "preparedDate") { valid = false; break; }			if(name == "vendorId") { valid = false; break; }			if(name == "justification") { valid = false; break; }		}	}	//rq items, checking row 1	var inputs = document.getElementById("items_table").rows[1].getElementsByTagName("input");	for(i = 0, l=inputs.length; i<l; i++) {		var name = inputs[i].name; var value = inputs[i].value;		if(value == "") {			if(name == "quantity") { valid = false; break; }			if(name == "unit") { valid = false; break; }			if(name == "price") { valid = false; break; }			if(name == "description") { valid = false; break; }		}	}	return valid;}function save() {	if(rq_form_validate() == true) {		var rqId = document.getElementById("rqId").innerHTML;		if(Number(rqId) == rqId || rqId == "new") {			var inputs;			var text = {};			text["requisitionId"] = rqId;			//get the requisition info			inputs = document.getElementById("rqData").getElementsByTagName("input");			for(i=0, l=inputs.length; i<l; i++) {				text[inputs[i].name] = inputs[i].value;			}			var items_list = [];			//get the items info			var rows = document.getElementById("items_table").tBodies[0].rows;			for (i = 0, il=rows.length; i < il; i++) {				items_list[i] = {};				inputs = rows[i].getElementsByTagName("input");				for(j=0, jl=inputs.length; j<jl; j++) {					items_list[i][inputs[j].name] = inputs[j].value;				}				//mark the deletes, skipping the first item.				if(inputs[jl - 1].checked == true && i > 0) {					items_list[i - 1]["del"] = 1;				}			}			text["items"] = items_list;			//console.log(text);			return JSON.stringify(text);		}	} else {		alert("Could not save. Incomplete data.");	}}function print_rq() {	rqId = document.getElementById("rqId").innerText;	window.open("api/print.php?pn=Requisitioning&requisitionId=" + rqId);}